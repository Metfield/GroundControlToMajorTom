/**
* EnumUtil.cs written by Andreas Mikko, 2016
*/

using System;
using System.Collections.Generic;
using System.Linq;

namespace Util
{
    /// <summary>
    /// Utillity class for working with enums
    /// </summary>
    public static class EnumUtil
    {
        /// <summary>
        /// Get an array with all possible values of the enum type
        /// </summary>
        /// <typeparam name="T">Enum type</typeparam>
        /// <returns>All values of the enum type</returns>
        public static IEnumerable<T> GetValues<T>()
        {
            return (T[])Enum.GetValues(typeof(T));
        }
        
        /// <summary>
        /// Create a dictionary with string keys that maps to an enum value.
        /// The keys are generated by applying ToString() and ToUpper() on the
        /// enum. Thus, all keys will be uppercase.
        /// </summary>
        /// <typeparam name="T">Enum type</typeparam>
        /// <returns>Dictionary with strings mapped to enums</returns>
        public static Dictionary<string, T> StringToEnum<T>()
        {
            Dictionary<string, T> dic = new Dictionary<string, T>();
            var values = GetValues<T>();
            foreach(T value in values)
            {
                string enumStr = value.ToString().ToUpper();
                dic.Add(enumStr, value);
            }
            return dic;
        }

        /// <summary>
        /// Get the max value that the enum can have.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns>Max value</returns>
        public static T MaxValue<T>()
        {
            return Enum.GetValues(typeof(T)).Cast<T>().Max();
        }
    }
}
